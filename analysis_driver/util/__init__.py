__author__ = 'mwham'
import subprocess
import os

from .logger import AppLogger, NamedAppLogger
from . import fastq_handler
from config import default as cfg

app_logger = NamedAppLogger('Util')


class AnalysisDriverError(Exception):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


def localexecute(*args, stream=True, dry_run=False):
    """
    Uses subprocess to run arbitrary shell commands.
    :param str args: Args to pass to subprocess.Popen. For example:
    localexecute('this', 'that', 'other') -> Popen(['this', 'that', 'other'])
    :param bool stream: Whether to stream the stdout, or write all stdout once the process completes.
    :param bool dry_run: Whether the function should run the command, or just log the shell command.
    :return: None if stream == True, the stdout and stderr if stream == False
    :rtype: None or tuple[str, str]
    """
    app_logger.debug('Executing: ' + ' '.join(args))
    if dry_run:
        return 'dry_run', 'dry_run'

    proc = subprocess.Popen(list(args), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if stream:
        # log stdout while the process is running
        while proc.poll() is None:  # while no exit status
            line = proc.stdout.readline()
            if line:
                print(line.decode('utf-8').rstrip('\n'))

        # log any remaining stdout after the process has finished
        for remaining_line in proc.stdout:
            print(remaining_line.decode('utf-8').rstrip('\n'))

    else:
        out, err = proc.communicate()
        if type(out) is bytes:
            out = out.decode('utf-8')
        if type(err) is bytes:
            err = err.decode('utf-8')
        return out, err


def bcbio_prepare_samples(prepare_script, csv_file):
    localexecute(
        prepare_script,
        '--out',
        'merged',
        '--csv',
        csv_file
    )
    return csv_file.rstrip('.csv') + '-merged.csv'


def setup_bcbio_run(bcbio, template, csv_file, run_dir, *fastqs):
    """
    Call localexecute to run 'bcbio -w template' on relevant input files.
    :param str bcbio: Path to the bcbio_nextgen.py executable
    :param str template: Path to the yaml file to use as the run template.
    :param str csv_file: Path to the csv sample file as generated by BCBioCSVWriter
    :param str run_dir: Path to the run folder
    :param str fastqs: Full paths to each input fastq file
    :return: None
    """
    localexecute(
        bcbio,
        '-w',
        'template',
        template,
        run_dir,
        csv_file,
        *fastqs
    )


def demultiplex_feedback(run_id):
    """
    Run rsync to send any extra files created by bcl2fastq back to the raw data dir. Only requires a run id.
    Reads everything else from the config.
    :param str run_id: The ID of the current run
    :return: None
    """
    localexecute(
        'rsync',
        '-avu',
        '--exclude=Data',
        os.path.join(cfg['input_data_dir'], run_id),
        os.path.join(cfg['raw_dir'], run_id)
    )

