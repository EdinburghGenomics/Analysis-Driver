__author__ = 'mwham'
import os.path
from logging import getLogger
from analysis_driver.executor import StreamExecutor
from analysis_driver.config import default as cfg

app_logger = getLogger(__name__)


def bcbio_prepare_samples(csv_file):
    app_logger.info('Setting up BCBio samples from ' + csv_file)
    _localexecute(
        os.path.join(os.path.dirname(cfg['bcbio']), 'bcbio_prepare_samples.py'),
        '--out',
        'merged',
        '--csv',
        csv_file
    )


def setup_bcbio_run(template, csv_file, run_dir, *fastqs):
    """
    Call localexecute to run 'bcbio -w template' on relevant input files.
    :param str bcbio: Path to the bcbio_nextgen.py executable
    :param str template: Path to the yaml file to use as the run template.
    :param str csv_file: Path to the csv sample file as generated by BCBioCSVWriter
    :param str run_dir: Path to the run folder
    :param str fastqs: Full paths to each input fastq file
    :return: None
    """
    app_logger.info('Setting up BCBio run')
    _localexecute(
        cfg['bcbio'],
        '-w',
        'template',
        template,
        run_dir,
        csv_file,
        *fastqs
    )


def transfer_output_data(dataset):
    out_dir = os.path.join(cfg['output_dir'], dataset)
    if not os.path.isdir(out_dir):
        os.mkdir(out_dir)
    _localexecute(
        'rsync',
        '-avu',
        os.path.join(cfg['jobs_dir'], dataset),
        cfg['output_dir']
    )


def _localexecute(*args):
    executor = StreamExecutor(list(args))
    executor.start()
    app_logger.info('Exit status: ' + str(executor.join()))
